import logging
import nest_asyncio
import asyncio
import requests
import random
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω—ã
import os
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENWEATHER_API_KEY = os.environ.get("OPENWEATHER_API_KEY")
NEWS_API_KEY = os.environ.get("NEWS_API_KEY")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids = set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å TaskRabbit
def get_taskrabbit_jobs(city_slug="new-york-city"):
    url = f"https://www.taskrabbit.com/locations/{city_slug}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")

    jobs = []
    for job in soup.select("a.styles__CategoryLinkWrapper-sc-1ni9u3v-2"):
        title = job.text.strip()
        link = job["href"]
        full_link = f"https://www.taskrabbit.com{link}"
        jobs.append((title, full_link))

    return jobs[:5]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_ids.add(update.effective_chat.id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç üòä –í–≤–µ–¥–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

async def emoji(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåü‚ú®üöÄ")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = "New York"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url).json()
        temp = response["main"]["temp"]
        desc = response["weather"][0]["description"]
        await update.message.reply_text(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {temp}¬∞C\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {desc}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
        print("–û—à–∏–±–∫–∞:", e)

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}"
    try:
        response = requests.get(url).json()
        articles = response.get("articles", [])[:3]
        if not articles:
            await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return
        msg = "üì∞ –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏:\n"
        for art in articles:
            msg += f"\n- {art['title']}\n{art['url']}\n"
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        print("–û—à–∏–±–∫–∞:", e)

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = [
        "üí¨ ¬´–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª",
        "üí¨ ¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.¬ª",
        "üí¨ ¬´–ù–µ –∂–¥–∏. –í—Ä–µ–º—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º.¬ª"
    ]
    await update.message.reply_text(random.choice(quotes))

async def birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! (—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è)")

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –¥–Ω—è:\n/weather\n/quote\n/news")

async def taskrabbit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ò—â—É –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å TaskRabbit...")
    try:
        jobs = get_taskrabbit_jobs()
        if jobs:
            text = "üõ† –ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è TaskRabbit:\n\n"
            for title, link in jobs:
                text += f"üîπ {title}\n{link}\n\n"
        else:
            text = "üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ TaskRabbit: {e}")
        print("–û—à–∏–±–∫–∞ TaskRabbit:", e)

async def linkedin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíº LinkedIn: –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/emoji ‚Äì –≠–º–æ–¥–∑–∏
/weather ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É
/news ‚Äì –ù–æ–≤–æ—Å—Ç–∏
/quote ‚Äì –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è
/birthday ‚Äì –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –î–†
/daily ‚Äì –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞
/taskrabbit ‚Äì –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è TaskRabbit
/linkedin ‚Äì –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn
/help ‚Äì –ü–æ–º–æ—â—å
"""
    await update.message.reply_text(text)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("emoji", emoji))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("quote", quote))
    app.add_handler(CommandHandler("birthday", birthday))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("taskrabbit", taskrabbit))
    app.add_handler(CommandHandler("linkedin", linkedin))
    app.add_handler(CommandHandler("help", help_command))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()

    async def daily_message():
        for user_id in user_ids:
            try:
                # –ü–æ–≥–æ–¥–∞
                city = "New York"
                url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                response = requests.get(url).json()
                temp = response["main"]["temp"]
                desc = response["weather"][0]["description"]
                weather_text = f"üå° –ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C\n‚òÅÔ∏è {desc}"

                # –¶–∏—Ç–∞—Ç–∞
                quotes = [
                    "üí¨ ¬´–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.¬ª",
                    "üí¨ ¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.¬ª",
                    "üí¨ ¬´–ù–µ –∂–¥–∏. –í—Ä–µ–º—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º.¬ª"
                ]
                quote_text = random.choice(quotes)

                # –ù–æ–≤–æ—Å—Ç–∏
                news_url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}"
                news_response = requests.get(news_url).json()
                articles = news_response.get("articles", [])[:3]
                news_text = "üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n" + "\n".join(
                    f"üîπ {art['title']}\n{art['url']}" for art in articles
                ) if articles else "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

                # TaskRabbit
                jobs = get_taskrabbit_jobs()
                taskrabbit_text = "üõ† –ó–∞–¥–∞–Ω–∏—è:\n" + "\n".join(
                    f"{title}\n{link}" for title, link in jobs
                ) if jobs else "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π TaskRabbit."

                # –û—Ç–ø—Ä–∞–≤–∫–∞
                await app.bot.send_message(chat_id=user_id, text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞:\n\n" +
                                           weather_text + "\n\n" +
                                           quote_text + "\n\n" +
                                           news_text + "\n\n" +
                                           taskrabbit_text)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", e)

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 8:00 —É—Ç—Ä–∞ UTC
       # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_message, "interval", hours=1)
    scheduler.start()


  

    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(run_bot())
